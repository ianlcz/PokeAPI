#!/usr/bin/env node

/* Importation des modules */
const express = require("express");
const debug = require("debug")("pokeapi:server");
const http = require("http");
const app = require("../app");
const { normalize } = require("path");
const mongoose = require("mongoose");
require("dotenv/config");

/* Définition du port d'écoute */
const port = normalize(process.env.PORT || "1996");
app.set("port", port);

const server = http.createServer(app);

server.listen(port, () => {
  console.log(`\nLe serveur est prêt sur http://localhost:${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  switch (error.code) {
    case "EACCES":
      console.error(
        typeof PORT === "string"
          ? "Pipe " + PORT
          : "Port " + PORT + " exige des privilèges élevés"
      );
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(
        typeof PORT === "string"
          ? "Pipe " + PORT
          : "Port " + PORT + " est déjà utilisé"
      );
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Connexion à la base de donnée MongoDB PokeAPI
mongoose.connect(
  process.env.DB_CONNECTION,
  { useNewUrlParser: true, useUnifiedTopology: true },
  (req, res) => {
    console.log("Vous êtes connectés à la base de donnée MongoDB PokeAPI !");
  }
);

function onListening() {
  const addr = server.address();
  debug(
    "Le serveur écoute sur le port",
    typeof addr === "string" ? "pipe " + addr : addr.port
  );
}
